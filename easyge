#!/usr/bin/env python3
import requests
import os
import pathlib

PROTON_GE_REPO = "https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"

def get_all_installed_versions():
    home_path = str(pathlib.Path.home())
    installed_versions = pathlib.Path(home_path + "/.steam/steam/compatibilitytools.d/").rglob("GE-Proton*")
    installed_versions = [str(version).split("/")[-1] for version in installed_versions]
    return installed_versions

def install_version(version_name: str = None):
    os.system("mkdir -p ~/.steam/steam/compatibilitytools.d")
    if version_name:
        print(f"Installing Proton-GE {version_name}...")
        
        version_name = f"GE-Proton{version_name.replace('.', '-').lower().strip()}"
        print(version_name)

        response = requests.get(PROTON_GE_REPO)
        if response.status_code == 200:
            releases = response.json()
            for release in releases:
                if version_name in release["tag_name"]:
                    assets = release["assets"]
                    for asset in assets:
                        if version_name in asset["name"]:
                            print(f"Downloading Proton-GE {version_name}...")
                            if "tar.gz" not in asset["name"]: continue
                            download_url = asset["browser_download_url"]
                            os.system(f"curl -L {download_url} -o ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
                            print(f"Extracting Proton-GE {version_name}...")
                            os.system(f"tar -xf ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
                            os.system("rm -rf ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
                            print(f"Proton-GE {version_name} installed successfully.")
                            break
                    break
        else:
            print("Failed to fetch releases from the Proton-GE repository.")
            exit(1)
    else:
        print("Installing the latest version of Proton-GE...")
        response = requests.get(PROTON_GE_REPO)
        if response.status_code == 200:
            releases = response.json()
            latest_release = releases[0]
            version_name = latest_release["tag_name"]
            if version_name in get_all_installed_versions():
                print(f"{version_name} is already installed.")
                exit(1)
            assets = latest_release["assets"]
            for asset in assets:
                if version_name in asset["name"]:
                    print(f"Downloading Proton-GE {version_name}...")
                    if "tar.gz" not in asset["name"]: continue
                    download_url = asset["browser_download_url"]
                    os.system(f"curl -L {download_url} -o ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
                    print(f"Extracting Proton-GE {version_name}...")
                    os.system(f"tar -xf ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
                    os.system("rm -rf ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
                    print(f"Proton-GE {version_name} installed successfully.")
                    break
        else:
            print("Failed to fetch releases from the Proton-GE repository.")
            exit(1)
    pass

def uninstall_version(version_name: str):
    version_name = f"GE-Proton{version_name.replace('.', '-').lower().strip()}"
    if version_name in get_all_installed_versions():
        os.system(f"rm -rf ~/.steam/steam/compatibilitytools.d/{version_name}")
        print(f"{version_name} uninstalled successfully.")
    else:
        print("Invalid version.")
        exit(1)

def main():
    print("Easy-GE: A script to install Proton-GE with ease.")
    print("Please select from one of the following options:")
    print("1. Install Proton-GE")
    print("2. List all installed Proton-GE versions")
    print("3. Uninstall Proton-GE")

    user_input = input("Enter your choice: ").lower().strip()
    if user_input == "1":
        user_input = input("Enter the version of Proton-GE to install [e.g.: 9.10 or leave blank for latest]: ").lower().strip()
        install_version(user_input)

    elif user_input == "2":
        print("The following Proton-GE versions are installed:")
        for version in get_all_installed_versions():
            print(version)

    elif user_input == "3":
        print("The following Proton-GE versions are installed:")
        for version in get_all_installed_versions():
            print(version)

        user_input = input("Enter the version of Proton-GE to uninstall [e.g.: 9.10]: ").lower().strip()
        if user_input:
            uninstall_version(user_input)
        else:
            print("No input given.")
            exit(1)

    else:
        print("Invalid choice. Exiting...")
        exit(1)
    

if __name__ == "__main__":
    main()