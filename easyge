#!/usr/bin/env python3
import requests
import os
import pathlib

PROTON_GE_REPO = "https://api.github.com/repos/GloriousEggroll/proton-ge-custom/releases"

def get_auth_headers(api_token=None):
    if api_token:
        return {"Authorization": f"token {api_token}"}
    return {}

def get_all_installed_versions():
    home_path = str(pathlib.Path.home())
    installed_versions = pathlib.Path(home_path + "/.steam/steam/compatibilitytools.d/").rglob("GE-Proton*")
    installed_versions = [str(version).split("/")[-1] for version in installed_versions]
    return installed_versions

def download_and_extract_asset(asset):
    download_url = asset["browser_download_url"]
    os.system(f"curl -L {download_url} -o ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
    print(f"Extracting {asset['name']}...")
    os.system(f"tar -xf ~/.steam/steam/compatibilitytools.d/proton.tar.gz -C ~/.steam/steam/compatibilitytools.d")
    os.system("rm -rf ~/.steam/steam/compatibilitytools.d/proton.tar.gz")
    print(f"{asset['name']} installed successfully.")

def install_version(api_token=None, version_name: str = None):
    os.system("mkdir -p ~/.steam/steam/compatibilitytools.d")
    version_name_formatted = f"GE-Proton{version_name.replace('.', '-').lower().strip()}" if version_name else None

    page = 1
    headers = get_auth_headers(api_token)
    while True:
        response = requests.get(f"{PROTON_GE_REPO}?per_page=100&page={page}", headers=headers)
        if response.status_code == 200:
            releases = response.json()
            if not releases: break

            for release in releases:
                tag_name = release["tag_name"]
                if (version_name and version_name_formatted in tag_name) or (not version_name and page == 1):
                    assets = release["assets"]
                    for asset in assets:
                        if "tar.gz" in asset["name"]:
                            print(f"Downloading Proton-GE {tag_name}...")
                            download_and_extract_asset(asset)
                            return

            if not version_name: break

            page += 1
        else:
            print("Failed to fetch releases from the Proton-GE repository.")
            exit(1)

    if version_name:
        print(f"Proton-GE {version_name} not found.")
    else:
        print("Failed to install the latest Proton-GE version.")

def uninstall_version(version_name: str):
    version_name_formatted = f"GE-Proton{version_name.replace('.', '-').lower().strip()}"
    if version_name_formatted in get_all_installed_versions():
        os.system(f"rm -rf ~/.steam/steam/compatibilitytools.d/{version_name_formatted}")
        print(f"{version_name_formatted} uninstalled successfully.")
    else:
        print("Invalid version.")
        exit(1)

def main():
    print("Easy-GE: A script to install Proton-GE with ease.")
    print("Please select from one of the following options:")
    print("1. Install Proton-GE")
    print("2. List all installed Proton-GE versions")
    print("3. Uninstall Proton-GE")

    user_input = input("Enter your choice: ").lower().strip()

    with open("token.txt", "r") as f:
        file_contents = f.read()
        if file_contents != "":
            api_token = file_contents
        else:
            api_token = input("Enter your GitHub API token (or press Enter to skip): ").strip() or None
            if api_token:
                f.write(api_token)

    if user_input == "1":
        user_input = input("Enter the version of Proton-GE to install [e.g.: 9.10 or leave blank for latest]: ").lower().strip()
        install_version(api_token, user_input)
    elif user_input == "2":
        print("The following Proton-GE versions are installed:")
        for version in get_all_installed_versions():
            print(version)
    elif user_input == "3":
        print("The following Proton-GE versions are installed:")
        for version in get_all_installed_versions():
            print(version)

        user_input = input("Enter the version of Proton-GE to uninstall [e.g.: 9.10]: ").lower().strip()
        if user_input:
            uninstall_version(user_input)
        else:
            print("No input given.")
            exit(1)
    else:
        print("Invalid choice. Exiting...")
        exit(1)

if __name__ == "__main__":
    main()
